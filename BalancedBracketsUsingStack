import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.regex.*;

public class Solution {

    static boolean isMatchingPair(char ch1, char ch2){
        if(ch1 == '(' && ch2 ==')')
            return true;
        else if(ch1 == '[' && ch2 ==']')
            return true;
        else if(ch1 == '{' && ch2 =='}')
            return true;
        else
            return false;
    }

    // Complete the isBalanced function below.
    static String isBalanced(String s) {

        Stack st = new Stack();
        char[] chrStrArr = s.toCharArray();

        for(int i=0; i<chrStrArr.length; i++){
            char c = chrStrArr[i];
            if(c == '[' || c == '(' || c == '{'){
                st.push(c);
            }
            if(c == ']' || c == ')' || c == '}'){
                if(st.isEmpty()){
                     return "NO";
                }
                else 
                {
                    char c1 = (char)st.pop();
                    if(!isMatchingPair(c1, c)){
                      return "NO";
                    }
                }
            }
        }
        if (st.isEmpty()) 
            return "YES"; /*balanced*/
        else
        {   /*not balanced*/
            return "NO"; 
        }  
    } 

    private static final Scanner scanner = new Scanner(System.in);

    public static void main(String[] args) throws IOException {
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        int t = scanner.nextInt();
        scanner.skip("(\r\n|[\n\r\u2028\u2029\u0085])?");

        for (int tItr = 0; tItr < t; tItr++) {
            String s = scanner.nextLine();

            String result = isBalanced(s);

            bufferedWriter.write(result);
            bufferedWriter.newLine();
        }

        bufferedWriter.close();
        scanner.close();
    }
}
